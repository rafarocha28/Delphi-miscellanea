unit ParamTest.Utils;

interface

const
  HELP_PARAM0 = '?';
  HELP_PARAM1 = 'h';
  HELP_PARAM2 = 'help';

  HelpParams: array [0..2] of string = (
    HELP_PARAM0, HELP_PARAM1, HELP_PARAM2
  );

  KILOBYTE = 1024;
  MEGABYTE = KILOBYTE * KILOBYTE;
  GIGABYTE = MEGABYTE * KILOBYTE;

  HexVolumes: array [0..15] of string = (
    '449A4000', '45870800','45D05800', '45F69000', '45B05800', '45505000',
    '45ABE000', '461C3C00', '4603BC00', '44CEC000', '45917000', '45CC7800',
    '45E79000', '46052000', '46167800', '451A4000');

type
  TIEEE754 = record
    case Byte of
      0: (AsInteger: Cardinal);
      1: (AsFloat: Single);
    end;

function HexIEEE754ToDecimalDouble(AHex: String): Double;

function GenerateRandomString(const ALength: Integer = 16): String;
function GenerateRandomLowercaseLetter: Char;
function GenerateRandomUppercaseLetter: Char;
function GenerateRandomNumberAsChar: Char;

function GetStringWithThreadId(AContent: String): String;

procedure WaitAndProcess;

implementation

uses
  System.SysUtils,
  Vcl.Forms,
  Winapi.Windows;

procedure WaitAndProcess;
begin
  Sleep(5);
  Application.ProcessMessages;
end;

function GetStringWithThreadId(AContent: String): String;
begin
  Result := Format('%s [%6.6d] | %s',
      [FormatDateTime('hh:nn:ss:zzz', Now), GetCurrentThreadId, AContent]);
end;

function HexIEEE754ToDecimalDouble(AHex: String): Double;
var
  ieee754: TIEEE754;
begin
  if not (AHex[1] = '$') then
    AHex := '$' + AHex;

  ieee754.AsInteger := StrToInt(AHex);

  Result := ieee754.AsFloat;
end;

function GenerateRandomLowercaseLetter: Char;
begin
  Randomize;
  Result := Chr(ord('a') + Random(26));
end;

function GenerateRandomUppercaseLetter: Char;
begin
  Randomize;
  Result := Chr(ord('A') + Random(26));
end;

function GenerateRandomNumberAsChar: Char;
begin
  Randomize;
  Result := Chr(ord('0') + Random(10));
end;

function GenerateRandomString(const ALength: Integer = 16): String;
var
  i: byte;
  r: integer;
begin
  SetLength(Result, ALength);
  Randomize;
  for i := 1 to ALength do
  begin
    r := Random(3);
    case r of
      0: Result[i] := GenerateRandomLowercaseLetter;
      1: Result[i] := GenerateRandomUppercaseLetter;
      2: Result[i] := GenerateRandomNumberAsChar;
    end;
    WaitAndProcess;
  end;
end;

end.
