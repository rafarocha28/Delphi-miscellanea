unit WinService;

interface

uses
  System.Classes,
  Winapi.Windows,
  Winapi.Messages,
  Winapi.WinSvc,
  System.SysUtils;

type
  TServiceStatus = SERVICE_STATUS;

  Handle = Cardinal;

function OpenServiceManager: Handle;
function IsInstalled(const ServiceName: string): Boolean;
function Start(const ServiceName: string): Boolean;
function Stop(const ServiceName: string): Boolean;
function Restart(const ServiceName: string): Boolean;
function IsRunning(const ServiceName: string): Boolean;

implementation

function OpenServiceManager: Handle;
begin
  if True { UsingWinNT } then
  begin
    Result := OpenSCManagerW(#0, #0, SC_MANAGER_ALL_ACCESS);
    if Result = 0 then
      raise Exception.Create('the servicemanager is not available');
  end
  else
  begin
    raise Exception.Create('only nt based systems support services');
    Result := 0;
  end;
end;

function IsInstalled(const ServiceName: string): Boolean;
var
  hSCM: Handle;
  hService: Handle;
begin
  hSCM := OpenServiceManager;
  Result := False;
  if hSCM <> 0 then
  begin
    hService := OpenServiceW(hSCM, PWideChar(ServiceName), SERVICE_QUERY_CONFIG);
    if hService <> 0 then
    begin
      Result := True;
      CloseServiceHandle(hService);
    end;
    CloseServiceHandle(hSCM);
  end
end;

function Start(const ServiceName: string): Boolean;
var
  hSCM: Handle;
  hService: Handle;
  lp: PWideChar;
begin
  hSCM := OpenServiceManager();
  Result := False;
  if hSCM <> 0 then
  begin
    hService := OpenServiceW(hSCM, PWideChar(ServiceName), SERVICE_START);
    if hService <> 0 then
    begin
      Result := StartServiceW(hService, 0, lp);
      CloseServiceHandle(hService);
    end;
    CloseServiceHandle(hSCM);
  end;
end;

function Stop(const ServiceName: string): Boolean;
var
  hSCM: Handle;
  hService: Handle;
  Status: TServiceStatus;
begin
  hSCM := OpenServiceManager();
  Result := False;
  if hSCM <> 0 then
  begin
    hService := OpenServiceW(hSCM, PWideChar(ServiceName), SERVICE_STOP);
    if hService <> 0 then
    begin
      Result := ControlService(hService, SERVICE_CONTROL_STOP, Status);
      CloseServiceHandle(hService);
    end;
    CloseServiceHandle(hSCM);
  end;
end;

function Restart(const ServiceName: string): Boolean;
begin
  if IsRunning(ServiceName) then
  begin
    Stop(ServiceName);
    repeat
      Sleep(100);
    until not IsRunning(ServiceName);
  end;
  Start(ServiceName);
  repeat
    Sleep(100);
  until IsRunning(ServiceName);
  Result := True;
end;

function IsRunning(const ServiceName: string): Boolean;
var
  hSCM: Handle;
  hService: Handle;
  Status: TServiceStatus;
begin
  hSCM := OpenServiceManager;
  Result := False;
  if hSCM <> 0 then
  begin
    hService := OpenServiceW(hSCM, PWideChar(ServiceName), SERVICE_QUERY_STATUS);
    if hService <> 0 then
    begin
      if QueryServiceStatus(hService, Status) then
      begin
        Result := (Status.dwCurrentState = SERVICE_RUNNING)
      end;
      CloseServiceHandle(hService);
    end;
    CloseServiceHandle(hSCM);
  end
end;

end.
